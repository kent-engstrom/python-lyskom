#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
# LysKOM Protocol A version 10 client interface for Python
# $Id: komgraph,v 1.7 2009/02/03 07:22:15 forsberg Exp $
# (C) 1999 Kent Engström. Released under GPL.

import kom
import komparam
import sys
import getopt
import string
import komwalk
import komformat

# Get revision number from RCS/CVS
vc_revision = "$Revision: 1.7 $"
revision = vc_revision[11:-2]

# Error/sucess reporting
exit_code = 0
def error(str, code = 2, exit_now = 0):
    global exit_code
    exit_code = max(exit_code, code)
    sys.stderr.write("ERROR: " + str + "\n")
    if exit_now:
        exit()
        
def success(str):
    sys.stderr.write("OK: " + str + "\n")

def exit():
    sys.exit(exit_code)

# Return true iff the lists share at least one common element
def common_element_exists(l1, l2):
    for e1 in l1:
        if e1 in l2:
            return 1
    return 0

# Recipient types
recipient_type_dict = {
    kom.MIR_TO: "To",
    kom.MIR_CC: "CC",
    kom.MIR_BCC: "BCC"
    }

# VCG quote
def vcg_quote(str):
    res = []

    for c in str:
        oc = ord(c)
        if oc >= 128 or c == '"':
            res.append("\\fi%03d" % oc)
        else:
            res.append(c)
    return string.join(res,"")

class VcgGraph(komwalk.Walker):
    def __init__(self, connection, root_text_no,
                 no_body = 0, stay_in_list = [], colour_authors = 0):
        komwalk.Walker.__init__(self, connection, root_text_no)
        self.no_body = no_body
        self.stay_in_list = stay_in_list
        self.colour_authors = colour_authors
        self.colour_dict = {}
        self.colour_next = 1
        
    def walk(self):
        print 'graph: {'
        print '    shrink: 4'
        print '    stretch: 3'
        print '  title: "KOM GRAPH"'
        komwalk.Walker.walk(self)
        print "}"

    def visit_node(self, text_no, text_stat):
        t = komformat.Text(self.c, text_no, text_stat = text_stat)

        # Colour
        colour = None
        if self.colour_authors:
            if not self.colour_dict.has_key(text_stat.author):
                self.colour_dict[text_stat.author] = self.colour_next
                self.colour_next = self.colour_next +1
            colour = "%d" % self.colour_dict[text_stat.author]

        # And now... the node itself
        print '  node: {'
        print '    title: "%d"' % text_no
        print '    horizontal_order: %d' % text_no
        if colour:
            print '    color: %s' % colour
        if self.no_body:
            print '    label: "%s"' % vcg_quote(str(text_no))
        else:
            print '    label: "%s"' % vcg_quote(t.get())
        print '  }'

        # Tell the walker to keep on walking
        return 1
    
    def visit_node_bad(self, text_no):
        print '  node: {'
        print '    title: "%d"' % text_no
        print '    horizontal_order: %d' % text_no
        print '    label: "*SAKNAS*"'
        print '  }'

    def visit_edge(self, text_no, text_stat, comment_in):
        if len(self.stay_in_list) > 0:
            # We have a stay-in list to consider. See if this comment leads
            # to a text in an acceptable conference.
            try:
                linked_text_stat = conn.textstats[comment_in.text_no]
                all_recipients = map(lambda x: x.recpt, linked_text_stat.misc_info.recipient_list)
                if not common_element_exists(all_recipients, self.stay_in_list):
                    return 0
            except:
                return 0                    

        print '  edge: {'
        print '    sourcename: "%d"' % text_no
        print '    targetname: "%d"' % comment_in.text_no
        if comment_in.type <> kom.MIC_COMMENT:
            print '    thickness: 4' # footnotes are thicker
            print '    linestyle: dotted' # ... and dotted
        print '  }'

        # Follow this edge
        return 1

# MAIN
# Connect and log in

param = komparam.Parameters(sys.argv[1:])
(conn, conn_error) = param.connect_and_login(kom.CachedConnection)
if conn is None:
    sys.stderr.write("%s: %s\n" % (sys.argv[0], conn_error))
    sys.exit(1)

#
# CHECK FOR OPTIONS
#

root = None
no_body = 0
stay_in_list = []
colour_authors = 0

options, arguments = getopt.getopt(param.get_arguments(),
                                   "",
                                   [
                                       "root=",
                                       "no-body",
                                       "stay-in=",
                                       "colour-authors",
                                       ])
for (opt, optarg) in options:
    if opt == "--root":
        try:
            root = string.atoi(optarg)
        except:
            error("Bad root text number %s" % optarg, exit_now = 1)
    elif opt == "--no-body":
        no_body = 1
    elif opt == "--stay-in":
        confs = conn.lookup_name(optarg, want_pers = 1, want_confs = 1)
        if len(confs) == 1:
            stay_in_list.append(confs[0][0])
        elif len(confs) > 1:
            error("%s is not a unique name" % optarg, exit_now = 1)
        else:
            error("%s not found" % optarg, exit_now = 1)
    elif opt == "--colour-authors":
        colour_authors = 1
    else:
        error("Option %s not handled (internal error)" % opt, exit_now = 1)

# Choose function

if root is not None:
    g = VcgGraph(conn, root,
                 no_body = no_body,
                 stay_in_list = stay_in_list,
                 colour_authors = colour_authors)
    g.walk()
    
else:
    error("Choose function")

exit()
